[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "asd"
version = "1.0.0"
description = "A production-grade web scraper for TUKES business registry"
authors = [
    {name = "Your Name", email = "your.email@example.com"}
]
readme = "README.md"
requires-python = ">=3.11"
dependencies = [
    "beautifulsoup4>=4.13.4",
    "pandas~=2.3.0", # Pin to patch version for reproducibility
    "requests>=2.32.4",
    "playwright~=1.52.0", # Pin to patch version for reproducibility
    "python-dotenv>=1.1.0",
    "pydantic>=2.11.0",
    "click>=8.2.0",
    "typer>=0.12.0",
    "rich>=13.0.0", # For beautiful terminal output
    "shiny>=1.4.0",
    "numpy>=2.3.0",
    "loguru>=0.7.0",
    "SQLAlchemy>=2.0.41",
    "polars>=1.30.0",
    "pylint>=3.3.7",
    "sentence-transformers>=4.1.0",
    "rapidfuzz>=3.13.0",
    "mistune>=3.1.3",
    "types-beautifulsoup4>=4.12.0.20250516",
    "mupy>=0.1.13",
    "mypy>=1.16.0",
    "types-requests>=2.32.4.20250611",
    "pytest>=8.4.1",
    "coverage>=7.9.2",
    "pytest-cov>=6.2.1",
    "ruff>=0.12.2",
    "bandit>=1.8.6",
]

[project.optional-dependencies]
dev = [
    "pytest>=8.4.0",
    "pytest-cov>=6.2.0",
    "pytest-mock>=3.14.0",
    "pytest-xdist>=3.7.0",
    "playwright~=1.52.0",  # Same version as main dependencies for consistency
    "mypy>=1.16.0",
    "types-requests>=2.32.0",
    "ruff>=0.11.13",
    "import-linter>=2.1.1",
]

[project.scripts]


[tool.setuptools]
packages = []

[tool.black]
line-length = 125
target-version = ['py311']
include = '\.pyi?$'

[tool.pytest.ini_options]
# Test discovery
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

# Output and reporting
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "-ra",  # Show all test results except passed
    "--cov=src",
    "--cov-report=html",
    "--cov-report=term-missing",
    "--cov-fail-under=80",
]

# Markers for test categorization
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "e2e: End-to-end tests",
    "performance: Performance tests",
    "slow: Slow running tests",
    "network: Tests requiring network access",
    "database: Tests requiring database access",
]

# Test filtering
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]

# Parallel execution
minversion = "6.0"


[tool.ruff]
line-length = 125
target-version = "py311"
cache-dir = ".ruff_cache"
respect-gitignore = true
src = ["src", "tests"]
fix = true  # Auto-fix when possible

[tool.ruff.lint]
select = [
    "E",    # pycodestyle errors
    "F",    # pyflakes
    "W",    # pycodestyle warnings
    "I",    # isort
    "N",    # pep8-naming
    "UP",   # pyupgrade
    "B",    # flake8-bugbear
    "C4",   # flake8-comprehensions
    "SIM",  # flake8-simplify
    "PIE",  # flake8-pie
    "RET",  # flake8-return
    "ERA",  # eradicate (commented code)
    "PL",   # pylint
    "PERF", # perflint
    "D",    # pydocstyle (docstrings)
    "S",    # flake8-bandit (security)
]
extend-select = [
    "RUF",  # Ruff-specific rules
    "PT",   # flake8-pytest-style
    "Q",    # flake8-quotes
    "TID",  # flake8-tidy-imports
    "TCH",  # flake8-type-checking
    "ARG",  # flake8-unused-arguments
    "PTH",  # flake8-use-pathlib
]
ignore = [
    "PLR0913",  # Too many arguments to function call
    "PLR0912",  # Too many branches
    "PLR0915",  # Too many statements
    "PLR2004",  # Magic value used in comparison (many are legitimate domain constants)
    "ERA001",   # Found commented-out code (sometimes intentional)
    "E501",     # Line too long (handled by formatter)
    "E402",     # Module import not at top of file
    "PLW0603",  # Using the global statement
    "PLC0415",  # Import outside top-level (often needed for lazy loading)
    "ARG001",   # Unused function arguments (Shiny framework requirements)
    "ARG002",   # Unused method arguments (validation method signatures)
    "UP042",    # Use StrEnum (Python 3.11+ feature, maintaining compatibility)
    "PLR0917",  # Too many positional arguments (CLI interface)
    "PLR6301",  # Method could be static (validation methods need self)
    "PLR0911",  # Too many return statements (acceptable for complex logic)
    "PLR1702",  # Too many nested blocks (complex business logic)
    "RUF029",   # Async function without await (Shiny framework)
    "PLR6201",  # Use set literal (list comprehension is clearer here)
    # Docstring rules - ignore conflicting rules
    "D203",     # 1 blank line required before class docstring (conflicts with D211)
    "D213",     # Multi-line docstring summary should start at the second line (conflicts with D212)
]
preview = true  # Enable preview rules for cutting-edge checks

[tool.ruff.lint.per-file-ignores]
"tests/**/*.py" = [
    "S101",     # Use of assert is allowed in tests
    "PLR2004",  # Magic values are common in tests
    "S105",     # Possible hardcoded password (test data)
    "S106",     # Possible hardcoded password (test data)
]

[tool.ruff.lint.pylint]
max-args = 7
max-returns = 3
max-branches = 12
max-statements = 50
max-public-methods = 20
max-locals = 20  # Increased from default 15 for report generation functions

[tool.ruff.lint.isort]
known-first-party = ["src"]
combine-as-imports = true

[tool.ruff.lint.pycodestyle]
max-doc-length = 120

[tool.ruff.lint.pydocstyle]
# Use Google docstring convention
convention = "google"

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "lf"

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "parents"  # Allow relative imports within the same package

[tool.mypy]
python_version = "3.11"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
cache_dir = ".mypy_cache"
cache_fine_grained = true
sqlite_cache = true
incremental = true
namespace_packages = true
explicit_package_bases = true
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "shiny.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "loguru.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "pydantic.*"
ignore_missing_imports = true

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__init__.py",
]

[tool.coverage.paths]
source = ["src", "*/site-packages"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if __name__ == .__main__.:",
    "raise AssertionError",
    "raise NotImplementedError",
    "if TYPE_CHECKING:",
]
precision = 2
show_missing = true

[tool.bandit]
# Security linting configuration
skips = ["B105"]  # Skip hardcoded password checks for markdown token types

[tool.safety]
# Security vulnerability scanning configuration
# Use 'safety scan' command (replaces deprecated 'safety check')
ignore-vulnerabilities = [
    # Add vulnerability IDs to ignore (if needed)
    # Example: "12345"  # Brief description of why this is ignored
]
# Scan configuration
continue-on-vulnerability-error = false
disable-optional-telemetry = true
# Output formatting
output = "text"  # Options: text, json, bare
# Policy file (optional)
# policy-file = ".safety-policy.json"

[tool.importlinter]
root_package = "src"

[dependency-groups]
dev = [
    "bandit>=1.8.5",
    # "flake8>=7.2.0",  # Covered by Ruff
    "flake8>=7.2.0",
    "import-linter>=2.3",
    "isort>=6.0.1",
    "mkdocs>=1.6.1",
    "mkdocs-gen-files>=0.5.0",
    "mkdocs-literate-nav>=0.6.2",
    "mkdocs-material>=9.6.14",
    "mkdocstrings[python]>=0.29.1",
    "mypy>=1.16.0",
    "pre-commit>=4.2.0",
    # "pydeps>=3.0.1",  # Optional - for dependency graphs
    # "pylint>=3.3.7",  # Covered by Ruff PL rules
    "pylint>=3.3.7",
    "radon>=6.0.1", # Keep for complexity metrics
    "ruff>=0.11.13",
    "safety>=3.2.9",
    "types-requests>=2.32.4.20250611",
    # "vulture>=2.14",  # Optional - for dead code detection
    "vulture>=2.14",
]
docs = [
    "mkdocs>=1.6.1",
    "mkdocs-gen-files>=0.5.0",
    "mkdocs-literate-nav>=0.6.2",
    "mkdocs-material>=9.6.14",
    "mkdocstrings>=0.29.1",
    "mkdocstrings-python>=1.16.12",
]

[tool.vulture]
min_confidence = 70
paths = ["src/"]
exclude = ["tests/", "migrations/"]
ignore_names = [
    # CLI commands - used by Typer decorators
    "scrape", "bulk", "analyze", "init", "test", "main_callback",
    # CLI callback parameters - used by Typer callbacks
    "version",
    # Enum values - used in string comparisons
    "A", "A_SJ", "L", "H", "ORG", "KU", "E3", "Y3", "JA", "SAK",
    "INACTIVE", "DISSOLVED", "MERGED", "EXPIRED", "SUSPENDED", "REVOKED", "TRANSFERRED",
    "MICRO", "SMALL", "MEDIUM", "LARGE", "ENTERPRISE",
    "ELECTRICAL", "MECHANICAL", "ENVIRONMENTAL", "SAFETY", "GENERAL",
    "PRIMARY", "SECONDARY", "AUXILIARY",
    "VALID", "DISCOVERED", "VERIFIED", "DEFUNCT", "DUPLICATE",
    "CRITICAL", "MAJOR", "NORMAL", "MINOR",
    # Shiny functions - used by framework
    "*_ui", "*_server", "*_panel", "*_table", "*_display", "*_cards", "*_overview",
    "reset_form", "start_scraping", "progress_ui", "status_text", "status_message",
    "results_panel", "results_table", "download_csv", "set_app_instance",
    "service_interface", "execute_service_action", "reset_results",
    "load_data", "overview_metrics", "multi_permit_summary", "cooling_electrical_summary",
    "system_status_cards", "analysis_results", "analysis_overview",
    # Database and ORM patterns
    "migrate_csv_data", "validate_database_url", "get_database_url",
    "is_production", "is_development", "adjust_debug_settings",
    # Configuration variables - may be accessed dynamically
    "*_host", "*_port", "*_timeout", "*_count", "*_days", "*_limit",
    "browser_user_agent", "retry_delay", "data_quality_checks", "backup_raw_data",
    "export_formats", "csv_encoding", "enable_structured_logging",
    # Validation and utilities
    "validate_*", "get_*", "create_*", "is_*", "setup_*",
    # Security patterns
    "encrypt_sensitive_data", "mask_for_logging", "execute_safe_query",
    "get_audit_log", "is_allowed", "get_remaining_tokens", "reset_bucket",
    "assign_role", "require_permission", "create_secure_session", "get_security_report",
    # Repository pattern methods
    "save_company", "get_company", "get_companies_for_website_search",
    "get_website", "list_websites", "update_search_task",
    # App entry points
    "get_app", "configure_app",
    # Exception classes - raised conditionally
    "ConfigurationError", "DatabaseError",
    # Special methods and framework patterns
    "__*__", "exc_tb", "connection_record",
    # Test/example functions
    "fetch_data", "unreliable_operation",
    # Path attributes
    "src", "tests", "docs", "logs",
]
